Hibernate vs JPA
JDBC vs Hibernate
get() vs load()
Lazy loading vs Eager loading
save()and persist() in Hibernate

************************************************************************************************************************


get()--
it gives actual object.
when we use this method, it fires a query to interact with database even if we dont use its object further.
If record is not found for which we are trying to fetch the data using get() method, it will through "NullPointerException".
get() method is used to retrieve a persistent object from the database. It is a member of the Session interface, and it takes the class of the object to be retrieved and the primary key of the object as arguments.
get() method only hits the database if the object is not present in the session cache. If the same object is already present in the cache then it returns previously stored data from the cache.
get() method returns null if there is no object present in the database.
This method eager load
It is slower than load() because it return fully initialized object which impact the performance of the application 
If you are not sure that object exist then use get() method.


load()--
it gives proxy object.
If we are not using object of data we are fetching, query will not be fired,. It will interact with database when we are trying to use object.
If record is not found for which we are trying to fetch the data using load() method, it will through "ObjectNotFoundException".
load() method is used to retrieve an object from the database by its identifier (primary key). It is used to initialize a proxy object instead of a fully-initialized object, so it can be used to lazily load the object when it is needed.
load() method does not retrieve the object from the database when it is called. Instead, it returns a proxy object that represents the object. The actual object is only retrieved from the database when it is needed, such as when a method of the object is called or a property is accessed. This technique is known as “lazy loading” and it is used to improve the performance of Hibernate by avoiding unnecessary database queries.
load() method throws ObjectNotFoundException if there is no object found in the database.
This method is lazy load.
If you are sure that object exist then use load() method.

************************************************************************************************************************


Lazy loading----
In Lazy loading, associated data loads only when we explicitly call getter or size method.
ManyToMany and OneToMany associations used lazy loading strategy by default.
It can be enabled by using the annotation parameter : fetch = FetchType.LAZY 
Initial load time much smaller than Eager loading


Eager loading---
In Eager loading, data loading happens at the time of their parent is fetched 
ManyToOne and OneToOne associations used lazy loading strategy by default.
It can be enabled by using the annotation parameter : fetch = FetchType.EAGER
Loading too much unnecessary data might impact performance

************************************************************************************************************************
boilerplate code in hibernate : 

//		  Configuration configuration = new Configuration().configure().addAnnotatedClass(Student.class);
//        StandardServiceRegistryBuilder serviceRegistryBuilder = new StandardServiceRegistryBuilder().applySettings(configuration.getProperties());
//        ServiceRegistry serviceRegistry = serviceRegistryBuilder.build();
//        SessionFactory sessionFactory = configuration.buildSessionFactory(serviceRegistry);
//        Session session = sessionFactory.openSession();
//        Transaction transaction = session.beginTransaction();
//        s = session.get(Student.class, 102);//fetching data from student table for id= 102
//        transaction.commit();
//        sessionFactory.close();
//        System.out.println(s);

************************************************************************************************************************

HQL example : ----
Student class : 

import javax.persistence.Entity;
import javax.persistence.Id;

@Entity
public class Student {
    @Id
    private int id;
    private String name;
    private float marks;

    // Getters and Setters
    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public float getMarks() {
        return marks;
    }

    public void setMarks(float marks) {
        this.marks = marks;
    }
}

Retrieving Students:--

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;
import org.hibernate.query.Query;

import java.util.List;

public class HQLExample {
    public static void main(String[] args) {
        // Create a Configuration object and build the SessionFactory
        Configuration configuration = new Configuration().configure().addAnnotatedClass(Student.class);
        SessionFactory sessionFactory = configuration.buildSessionFactory();

        Session session = null;
        Transaction transaction = null;

        try {
            session = sessionFactory.openSession();
            transaction = session.beginTransaction();

            // HQL query to retrieve all students
            String hql = "FROM Student";
            Query<Student> query = session.createQuery(hql, Student.class);
            List<Student> students = query.getResultList();

            // Print the results
            for (Student student : students) {
                System.out.println("ID: " + student.getId() + ", Name: " + student.getName() + ", Marks: " + student.getMarks());
            }

            transaction.commit();
        } catch (Exception e) {
            if (transaction != null) {
                transaction.rollback();
            }
            e.printStackTrace();
        } finally {
            if (session != null) {
                session.close();
            }
            if (sessionFactory != null) {
                sessionFactory.close();
            }
        }
    }
}

updating student: --

public class HQLUpdateExample {
    public static void main(String[] args) {
        Configuration configuration = new Configuration().configure().addAnnotatedClass(Student.class);
        SessionFactory sessionFactory = configuration.buildSessionFactory();

        Session session = null;
        Transaction transaction = null;

        try {
            session = sessionFactory.openSession();
            transaction = session.beginTransaction();

            // HQL query to update a student's marks
            String hql = "UPDATE Student SET marks = :newMarks WHERE id = :studentId";
            Query query = session.createQuery(hql);
            query.setParameter("newMarks", 95.0f);
            query.setParameter("studentId", 101);
            int result = query.executeUpdate();

            System.out.println("Rows affected: " + result);
            transaction.commit();
        } catch (Exception e) {
            if (transaction != null) {
                transaction.rollback();
            }
            e.printStackTrace();
        } finally {
            if (session != null) {
                session.close();
            }
            if (sessionFactory != null) {
                sessionFactory.close();
            }
        }
    }
}


Deleting student : --- 

public class HQLDeleteExample {
    public static void main(String[] args) {
        Configuration configuration = new Configuration().configure().addAnnotatedClass(Student.class);
        SessionFactory sessionFactory = configuration.buildSessionFactory();

        Session session = null;
        Transaction transaction = null;

        try {
            session = sessionFactory.openSession();
            transaction = session.beginTransaction();

            // HQL query to delete a student
            String hql = "DELETE FROM Student WHERE id = :studentId";
            Query query = session.createQuery(hql);
            query.setParameter("studentId", 101);
            int result = query.executeUpdate();

            System.out.println("Rows affected: " + result);
            transaction.commit();
        } catch (Exception e) {
            if (transaction != null) {
                transaction.rollback();
            }
            e.printStackTrace();
        } finally {
            if (session != null) {
                session.close();
            }
            if (sessionFactory != null) {
                sessionFactory.close();
            }
        }
    }
}